{
  "name": "com.unity.transport",
  "displayName": "Unity Transport",
  "version": "1.4.0",
  "unity": "2020.3",
  "unityRelease": "0f1",
  "description": "Unity network transport layer - the low-level interface for sending UDP data",
  "dependencies": {
    "com.unity.collections": "1.2.4",
    "com.unity.burst": "1.6.6",
    "com.unity.mathematics": "1.2.6"
  },
  "_upm": {
    "changelog": "### New features\n* Added a new `GetUnsafeReadOnlyPtr` method to `DataStreamReader`. This is meant as an escape hatch for use cases that require passing stream readers outside of a job (this not possible with `DataStreamReader` directly since the safety system will not allow it). As the name implies, this throws away many safety guarantees and is thus not recommended to use unless absolutely required.\n\n### Changes\n* `NetworkDriver.GetRelayConnectionStatus` will now return the new enum value `RelayConnectionStatus.NotUsingRelay` when called on a `NetworkDriver` that has not been configured to use Unity Relay. The previous behavior was to throw an exception.\n* It is now possible to configure the maximum message size that the transport will send through a new `maxMessageSize` parameter in `NetworkSettings.WithNetworkConfigParameters`. This is useful for environments where network equipment mishandles larger packets (like some mobile networks or VPNs). The value excludes IP and UDP headers, but includes headers added by the transport itself (e.g. reliability headers). The default value is 1400. Note that it is recommended that both client and server be configured to use the same value."
  },
  "upmCi": {
    "footprint": "3422cf5c7f2cac02947030d94f332733127d3eff"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.transport@1.4/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.transport.git",
    "type": "git",
    "revision": "4a6bba09bd32ed2fa840f331651875d68e73cadc"
  },
  "samples": [
    {
      "displayName": "Custom Network Interface",
      "description": "Shows how to build a custom network interface using the INetworkInterface API",
      "path": "Samples~/CustomNetworkInterface"
    },
    {
      "displayName": "Ping/Pong Sample",
      "description": "Several samples on the basics of jobs, mainthread setups using the Unity Transport",
      "path": "Samples~/Ping"
    },
    {
      "displayName": "Pipelines Sample",
      "description": "Shows how to use Pipeline stages",
      "path": "Samples~/Pipeline"
    },
    {
      "displayName": "Unity Relay with Unity Transport",
      "description": "Basic sample on how to use Unity Relay with Unity Transport, your project must depend on com.unity.services.relay",
      "path": "Samples~/RelayPing"
    },
    {
      "displayName": "Soak Sample",
      "description": "Shows how to use pipelines and jobs to gather stats and create traffic using Unity Transport",
      "path": "Samples~/Soaker"
    }
  ]
}
